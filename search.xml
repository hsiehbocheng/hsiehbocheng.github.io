<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello regexp</title>
      <link href="/2024/03/14/hello%20regexp/"/>
      <url>/2024/03/14/hello%20regexp/</url>
      
        <content type="html"><![CDATA[<p>正則表達式（RegExp）是一種用於字符串搜索和替換的強大模式匹配語言。<br>通過定義特定的模式，它可以快速識別和提取文本數據中的關鍵信息，從而使數據處理變得更加高效和精確。<br>無論是數據清洗、日誌分析還是自然語言處理，正則表達式都是不可或缺的工具，幫助我們從繁雜的數據中提煉出有價值的信息。</p><span id="more"></span><h3 id="什麼情況會使用到-RegExp｜以車禍案件篩選為例"><a href="#什麼情況會使用到-RegExp｜以車禍案件篩選為例" class="headerlink" title="什麼情況會使用到 RegExp｜以車禍案件篩選為例"></a>什麼情況會使用到 RegExp｜以車禍案件篩選為例</h3><p>以 <strong>找到車禍案件為例</strong>，下面整理出 7 則在判決中會出現的片段，我們的任務是要找到車禍案件，<br>首先，我們先觀察一下是否有一定的規律可以進行歸納。</p><ol><li>就本件<strong>車禍</strong>之發生自有過失，應就原告所受損害負賠償責任 </li><li>足見被告對系爭<strong>車禍</strong>之發生，顯有過失 </li><li>原告看到被告之機<strong>車</strong>停放於原告與陳明風同住之系爭住所外，原告早已耳聞兩人之間有曖昧關係</li><li>在前開191號房屋<strong>車</strong>庫門邊又拿了一條拉鐵門用的鐵條</li><li>隨即緊急煞車暫停於<strong>車</strong>道，致陳維德煞<strong>車</strong>不及，<strong>撞</strong>及上訴人<strong>車</strong>輛後端（下稱系爭事故）</li><li>被告由後方追<strong>撞</strong>原告之<strong>車</strong>輛，原告因而受有左側足部壓砸傷</li><li>甚至遭原告吐口水及左肩碰<strong>撞</strong>陸續之挑釁，…，該鐵條不但影響<strong>車</strong>輛進出 …</li></ol><p>❓ 我們發現 …</p><ol><li>不一定每篇車禍判決皆會提及車禍 → 只用車禍去篩選會漏掉許多資料，例如第5, 6筆資料</li><li>非車禍案件也有很多提到車的可能 → 只用車去篩選也不宜，例如第3, 4 筆資料</li><li>車禍案件更常會同時提及撞 … 車 …，且兩字會在附近</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = [...,</span><br><span class="line">        ...,]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;車禍&#x27;</span> <span class="keyword">in</span> text: <span class="comment"># 如果車禍出現在文中，可認為為車禍案件</span></span><br><span class="line">        result.append(text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;車&#x27;</span> <span class="keyword">in</span> text: <span class="comment"># 如果車出現，判斷附近是否出現撞</span></span><br><span class="line">        car_index = text.index(<span class="string">&#x27;車&#x27;</span>)</span><br><span class="line">        sub_text = text[<span class="built_in">max</span>(car_index - <span class="number">10</span>, <span class="number">0</span>): <span class="built_in">min</span>(car_index + <span class="number">10</span>, <span class="built_in">len</span>(text))]</span><br><span class="line">        <span class="built_in">print</span>(sub_text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;撞&#x27;</span> <span class="keyword">in</span> sub_text: <span class="comment"># 如果出現撞，則符合設定之規則</span></span><br><span class="line">            result.append(text)</span><br></pre></td></tr></table></figure><p>上面的做法有以下兩個問題，也是為什麼我們希望使用正則要表達對字串的篩選邏輯</p><ol><li>可讀性低</li><li>維護性低</li></ol><ul><li>使用正則的話</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&#x27;車禍|車.&#123;0,10&#125;撞|撞.&#123;0,10&#125;車&#x27;</span>):</span><br><span class="line">        result.append(text)</span><br></pre></td></tr></table></figure><hr><h3 id="什麼是正規表達式-Regular-Expression"><a href="#什麼是正規表達式-Regular-Expression" class="headerlink" title="什麼是正規表達式 Regular Expression"></a>什麼是正規表達式 Regular Expression</h3><blockquote><p>利用 <strong>文字</strong> 與一系列 <strong>定義好的符號</strong> 所組合而成的 <strong>規則模式（pattern）</strong>，用來匹配我們的 <strong>目標字串。<br>車禍|車.{0,5}撞|撞.{0,5}車</strong></p></blockquote><p>搭配支援正則表達的工具、套件，對字串做 <strong>搜尋</strong>、<strong>替換</strong> 等處理。</p><blockquote></blockquote><h3 id="該怎麼使用正則"><a href="#該怎麼使用正則" class="headerlink" title="該怎麼使用正則"></a>該怎麼使用正則</h3><img src="/2024/03/14/hello%20regexp/regexp_meme.png" class=""><ul><li><p><strong>RegExp 常見特殊符號</strong></p><table><thead><tr><th>符號</th><th>解釋</th></tr></thead><tbody><tr><td><code>.</code></td><td>比對換行符<code>\n</code>以外所有字元</td></tr><tr><td><code>\w</code></td><td>英文字母與數字</td></tr><tr><td><code>\s</code></td><td>空白、換行符 <code>\n</code>、回車符 <code>\r</code>tab <code>\t</code></td></tr><tr><td><code>|</code></td><td>代表 or，用於連結兩種 pattern</td></tr></tbody></table><table><thead><tr><th>符號</th><th>解釋</th></tr></thead><tbody><tr><td><code>?</code></td><td>0 或一次</td></tr><tr><td><code>+</code></td><td>連續出現一次以上</td></tr><tr><td><code>&#123;x&#125;</code></td><td>x 次</td></tr><tr><td><code>&#123;x,y&#125;</code></td><td>x~y 次</td></tr></tbody></table></li><li><p><strong>小練習</strong></p><p>  下列哪個正規表達式 <strong>無法</strong> 比對到 <code>google</code>？</p><ol><li><code>g\s+gle</code></li><li><code>g\w&#123;1,&#125;gle</code></li><li><code>go+gle</code></li></ol></li><li><p><strong>Python re 套件介紹</strong></p><blockquote><p><strong>設定 pattern → 判斷字串中是否有這個 pattern → 我的 pattern 對應到的字是什麼</strong></p></blockquote><p>  在 python 中，我們可以透過 <code>re</code> 這個套件執行正則表達式的操作</p><ol><li><p>設定 pattern → <code>re.compile()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;小明從光復路由北往南方向直行，遭被告駕駛上開車輛左側碰撞而倒車，小明很生氣&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 re.compile 設定正規表達式</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>字串是否符合我們要的 pattern → <code>re.search()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;re.search(pattern=pattern, </span><br><span class="line">string=text)</span><br><span class="line"><span class="comment"># 在 index=22~28 match 到 ‘車輛左側碰撞’ 符合我們的規則</span></span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">22</span>, <span class="number">28</span>), <span class="keyword">match</span>=<span class="string">&#x27;車輛左側碰撞&#x27;</span>&gt; </span><br></pre></td></tr></table></figure></li><li><p>提取匹配到的字串 → <code>re.search().group()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;re.search(pattern, text).group()</span><br><span class="line"><span class="string">&#x27;車輛左側碰撞&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>結合 pd.Series 找出符合規則的資料 → <code>pd.Series.str.contains()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;data = pd.DataFrame(&#123;<span class="string">&#x27;text&#x27;</span>: </span><br><span class="line">     [<span class="string">&#x27;小明從光復路由北往南方向直行，遭被告駕駛上開車輛左側碰撞而倒車，小明很生氣&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abcdefghijklmnopgrstuvwxyz&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;甲乙丙丁戊&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;data.text.<span class="built_in">str</span>.contains(pat=pattern)</span><br><span class="line"><span class="number">0</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>想用 SQL 撈？→<code>RLIKE</code>  （適用HAP)</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> context</span><br><span class="line"><span class="keyword">FROM</span> the_table</span><br><span class="line"><span class="keyword">WHERE</span> context RLIKE <span class="string">&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><hr><h3 id="工具分享"><a href="#工具分享" class="headerlink" title="工具分享"></a>工具分享</h3><p><a href="https://regex101.com/">regex101: build, test, and debug regex</a></p><hr><h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><p><a href="https://youtu.be/hy3sd9MOAcc?si=pq3WcCyCtBCAywth">CS50</a><br><a href="https://www.datacamp.com/tutorial/python-regular-expression-tutorial">DataCamp</a><br><a href="https://www.w3schools.com/python/python_regex.asp">W3School</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nlp </tag>
            
            <tag> regexp </tag>
            
            <tag> python </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
