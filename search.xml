<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PySpark MacOS Installation: Step-by-Step Guide 🐍</title>
      <link href="/2024/04/07/pyspark-install-on-mac/"/>
      <url>/2024/04/07/pyspark-install-on-mac/</url>
      
        <content type="html"><![CDATA[<p>分為兩部分介紹如何安裝 pyspark，</p><ol><li>安裝：介紹使用 pyspark 前所需安裝的所有工具與軟體。</li><li>測試：安裝完畢後，測試一些是否能順利開啟 spark 與 pyspark。<br>話不多說，開始來安裝吧～</li></ol><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>在安裝階段，我們需要安裝 Java、Scala 與 Apache Spark，並且安裝 pyspark 套件。<br>而在安裝這些軟體前，我們需要 Xcode 與 Homebrew 這兩項工具。</p><ol><li><p>Xcode: Apple’s Command Line Tools<br>在終端機輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>接者在彈跳視窗點按 install 即可。</p></li><li><p>安裝 Homebrew<br><a href="https://brew.sh/">Homebrew</a> 是一個開源的套件管理器，其使用非常簡單所以可以節省很多的精力。<br>我們後續也會使用 homebrew 安裝 Java、Scala 與 spark。<br>到 homebrew 的頁面造著指示安裝即可。<br>官網連結：<br><a href="https://brew.sh/">Homebrew Downloads｜Homebrew</a><br>如果不確定自己是否有安裝 homebrew 或是安裝完成想檢查是否成功的話，可以輸入 <code>brew</code> 或是 <code>which brew</code>，如果有成功出現 Example usage 或是 brew 的路徑代表成功～</p><img src="/2024/04/07/pyspark-install-on-mac/homebrew.png" class=""></li><li><p>安裝 java<br>可以先下 <code>java -version</code> 檢查電腦是否有 java 了<br>如果沒有的，直接至 oracle 官網下載 JDK 安裝包。<br>官網連結：<br><a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a><br>選取 macOS 後，依照電腦芯片安裝對應的 DMG Installer，intel 為 x64，apple silicon 為 ARM64。</p><img src="/2024/04/07/pyspark-install-on-mac/oracle_java.png" class=""><p>安裝完成後，打開終端機，一樣輸入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>顯示以下訊息代表正確安裝～</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;22&quot; 2024-03-19</span><br><span class="line">Java(TM) SE Runtime Environment (build 22+36-2370)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 22+36-2370, mixed mode, sharing)</span><br></pre></td></tr></table></figure></li><li><p>安裝 scala<br>一樣可以先利用 <code>scala -version</code> 檢查是否有 scala，<br>如果沒有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install scala</span><br></pre></td></tr></table></figure></li><li><p>安裝 spark<br>直接輸入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-spark</span><br></pre></td></tr></table></figure></li><li><p>安裝 pyspark<br>pyspark 是一個作為 python 與 spark 接口的套件，也就是直接利用 <code>pip</code> 即可，其中記得切換到你正在使用的虛擬環境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyspark</span><br></pre></td></tr></table></figure></li></ol><h2 id="檢查"><a href="#檢查" class="headerlink" title="檢查"></a>檢查</h2><p>做完上述步驟，即完成 pyspark 的安裝，我們可以來檢查一下是否安裝成功。</p><ol><li><p>spark<br>在終端機輸入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-shell</span><br></pre></td></tr></table></figure><p>成功的話會如下圖所示，並進入 scala 環境，接著輸入 <code>:q</code> 退出環境。</p><img src="/2024/04/07/pyspark-install-on-mac/spark_check.png" class=""></li><li><p>pyspark<br>接著測試我們真正使用的 pyspark，開啟 jupyter notebook，輸入以下的程式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line">sc = SparkContext()</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line">spark = SparkSession.builder.getOrCreate()</span><br></pre></td></tr></table></figure></li></ol><p>如此以來，就完成 pyspark 的安裝拉（撒花 🎉</p><p>此文章同步於 <a href="https://medium.com/@bensonhsieh/pyspark-macos-installation-step-by-step-guide-1e5ff00e8efd">Medium</a>。<br>也歡迎大家傳送 Linkedin 連結邀請給我。<a href="https://www.linkedin.com/in/%E5%8D%9A%E4%B8%9E-%E8%AC%9D-4396b7235/">Linkedin Profile</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quickly Debug Python Code with ipdb！</title>
      <link href="/2024/03/17/debugging-in-python-with-ipdb/"/>
      <url>/2024/03/17/debugging-in-python-with-ipdb/</url>
      
        <content type="html"><![CDATA[<p>在程式世界裡，抓蟲（debug）是個不可避免的坑，能不能高效的除錯技巧更是每位工程師和資料科學家痛 🥲。最近因為工作的關係，接手程式需要進行優化，在嘗試理解的過程中碰到一個除錯強大工具 ipdb，跟大家分享！<br>ipdb 是一個第三方互動式除錯工具。ipdb 建立了一個互動式 shell 讓我們可以輕鬆地進行程式測試與除錯，非常方便。</p><span id="more"></span><h3 id="How-to-Debug"><a href="#How-to-Debug" class="headerlink" title="How to Debug"></a>How to Debug</h3><p>相信大家都有遇過：「程式有 error 但不知道為什麼出錯 … 程式跑起來了！… WHY！！！」的囧境 Orz</p><img src="/2024/03/17/debugging-in-python-with-ipdb/ipdb_meme.png" class=""><p>初學者在 debug 時可能會使用 <code>print</code> 、<code>logging</code> 打印出段落中的訊息以判斷程式是否如預期運作，或是加入 <code>Exception Handling</code> 、<code>assertions</code> 做異常處理，更有經驗的工程師可能能更善用如 PyCharm、VSCode 這些 IDE 所提供的除錯功能或是撰寫單元測試。而我們也可以透過 ipdb 這個工具來幫助我們了解目前環境變數的變化。那，ipdb 究竟是什麼？</p><h3 id="What’s-ipdb"><a href="#What’s-ipdb" class="headerlink" title="What’s ipdb"></a>What’s ipdb</h3><p><a href="https://pypi.org/project/ipdb/">ipdb</a> 全名 IPython-enables python debugger，其透過 IPython 擴展了 pdb 原有的基本功能，讓我們可以藉由 ipdb 建立的互動式 shell 執行 python 程式，不論是想看函數參數傳入內容是否正確、dataframe 或是 tensor 的 shape，甚至想寫額外測試的程式都可以輕鬆做到。</p><p>使用 ipdb 就跟使用 pdb 時一樣簡單，將套件載入後，於想設置斷點的地方添加以下程式片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!pip install ipdb</span><br><span class="line"><span class="keyword">import</span> ipdb</span><br><span class="line">ipdb.set_trace()</span><br></pre></td></tr></table></figure><p>也可以直接在命令列輸入以下指定啟動 ipdb 調校模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ipdb script.py</span><br></pre></td></tr></table></figure><h3 id="ipdb-cheatsheet"><a href="#ipdb-cheatsheet" class="headerlink" title="ipdb cheatsheet"></a>ipdb cheatsheet</h3><ul><li>h：print 出可用的命令或特定命令</li><li>q：退出程式</li><li>n：繼續執行，直到達到單前函數中的下一行，或著他返回</li><li>c：繼續執行直到下個斷點或結束</li><li>a：print 出當前函數的參數</li><li>p：print 出變數的值</li></ul><p>當進入 ipdb 的互動式環境後，可以調用以上指令進行操作，例如執行下一行或是退出整個程式。</p><h3 id="ipdb-實戰演練"><a href="#ipdb-實戰演練" class="headerlink" title="ipdb 實戰演練"></a>ipdb 實戰演練</h3><p>這裡示範使用<code>ipdb.set_trace()</code> 該如何進行除錯，通常會是在命令列作使用，而我們也可以在 jupyter notebook 做簡單測試，<br>我們使用 PyTorch 與 iris 資料集，建立一個很簡單的神經網路做預測模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ipdb</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset, DataLoader</span><br><span class="line">le = LabelEncoder()</span><br><span class="line"></span><br><span class="line">iris = sm.datasets.get_rdataset(<span class="string">&#x27;iris&#x27;</span>).data</span><br><span class="line">iris.iloc[:, -<span class="number">1</span>] = le.fit_transform(iris.iloc[:, -<span class="number">1</span>])</span><br><span class="line">iris = np.array(iris)</span><br><span class="line">dataset = TensorDataset(torch.tensor(iris[:, :-<span class="number">1</span>], dtype=torch.<span class="built_in">float</span>), torch.tensor(iris[:, -<span class="number">1</span>], dtype=torch.long))</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myNN</span>(nn.Module):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">super</span>(myNN, self).__init__()</span><br><span class="line">    self.fc1 = nn.Linear(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">    self.fc2 = nn.Linear(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    self.fc3 = nn.Linear(<span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">    x = torch.relu(self.fc1(x))</span><br><span class="line">    x = torch.relu(self.fc2(x))</span><br><span class="line">    x = self.fc3(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = myNN()</span><br><span class="line">loss_func = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">  <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">    inputs, labels = data</span><br><span class="line">    ipdb.set_trace()</span><br><span class="line">    outputs = model(inputs)</span><br><span class="line">    loss = loss_func(outputs.squeeze(), labels)</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch: <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在訓練迴圈中，每個 batch 會作為 inputs 餵給模型輸出預測結果 ouputs，我們可以在 <code>outputs = model(inputs)</code> 前利用 <code>ipdb.set_trace()</code> 設置斷點，<br>目的是為了查看 inputs 資料長什麼樣子，因為在 CV、NLP 模型中，資料時常會先做許多 transform 函數才進入模型，此時就可能會想要確認模型輸入的資料細節。</p><video width="100%" controls>    <source src="ipdb.mov" type="video/mp4"></video><p>當程式碼跑到該行時，就會看到跳出 ipdb 的互動式 shell，可以在裡面下 cheatsheet 提到的參數，或是寫 Python 程式，<br>例如可以查看 inputs.shape 或是直接打印出資料內容。而輸入 c 會跳到下一個 epoch，n 會執行下一行，q 則會直接退處整個程式。</p><h3 id="ipdb-缺點"><a href="#ipdb-缺點" class="headerlink" title="ipdb 缺點"></a>ipdb 缺點</h3><ol><li>Limited  Debugging：ipdb 雖然具有互動式調校非常方便，但對於更複雜的問題（例如：multithreaded application），ipdb 的調校能力將會受到限制。</li><li>Slow：因為是逐步執行，可能會較耗時，因此可能不適合大型的應用產品、程式</li></ol><p>總結來說，ipdb 提供非常直觀、輕鬆的方式，用交互模式讓開發人員可以進行除錯，雖然在大型、複雜程式的情境可能沒那麼適合，但依舊是一個非常強大方便得工具。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://www.freecodecamp.org/news/python-debugging-handbook/">freeCodeCamp Python Debugging Handbook - How to Debug Your Python Code</a><br><a href="https://youtu.be/RYkEoCkJWeA?si=uiUgBy6wu-xwq9w5">台大資訊 深度學習之應用|ADL TA Recitation: PyTorch Debugging 有BUG怎麼辦!?</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started with Regexp, Simple and Clear 🤗</title>
      <link href="/2024/03/14/hello%20regexp/"/>
      <url>/2024/03/14/hello%20regexp/</url>
      
        <content type="html"><![CDATA[<p>正則表達式（RegExp）是一種用於字符串搜索和替換的強大模式匹配語言。<br>通過定義特定的模式，它可以快速識別和提取文本數據中的關鍵信息，從而使數據處理變得更加高效和精確。<br>無論是數據清洗、日誌分析還是自然語言處理，正則表達式都是不可或缺的工具，幫助我們從繁雜的數據中提煉出有價值的信息。</p><span id="more"></span><h2 id="什麼情況會使用到-RegExp｜以車禍案件篩選為例"><a href="#什麼情況會使用到-RegExp｜以車禍案件篩選為例" class="headerlink" title="什麼情況會使用到 RegExp｜以車禍案件篩選為例"></a>什麼情況會使用到 RegExp｜以車禍案件篩選為例</h2><p>以 <strong>找到車禍案件為例</strong>，下面整理出 7 則在判決中會出現的片段，我們的任務是要找到車禍案件，<br>首先，我們先觀察一下是否有一定的規律可以進行歸納。</p><ol><li>就本件<strong>車禍</strong>之發生自有過失，應就原告所受損害負賠償責任 </li><li>足見被告對系爭<strong>車禍</strong>之發生，顯有過失 </li><li>原告看到被告之機<strong>車</strong>停放於原告與陳明風同住之系爭住所外，原告早已耳聞兩人之間有曖昧關係</li><li>在前開191號房屋<strong>車</strong>庫門邊又拿了一條拉鐵門用的鐵條</li><li>隨即緊急煞車暫停於<strong>車</strong>道，致陳維德煞<strong>車</strong>不及，<strong>撞</strong>及上訴人<strong>車</strong>輛後端（下稱系爭事故）</li><li>被告由後方追<strong>撞</strong>原告之<strong>車</strong>輛，原告因而受有左側足部壓砸傷</li><li>甚至遭原告吐口水及左肩碰<strong>撞</strong>陸續之挑釁，…，該鐵條不但影響<strong>車</strong>輛進出 …</li></ol><p>❓ 我們發現 …</p><ol><li>不一定每篇車禍判決皆會提及車禍 → 只用車禍去篩選會漏掉許多資料，例如第5, 6筆資料</li><li>非車禍案件也有很多提到車的可能 → 只用車去篩選也不宜，例如第3, 4 筆資料</li><li>車禍案件更常會同時提及撞 … 車 …，且兩字會在附近</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = [...,</span><br><span class="line">        ...,]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;車禍&#x27;</span> <span class="keyword">in</span> text: <span class="comment"># 如果車禍出現在文中，可認為為車禍案件</span></span><br><span class="line">        result.append(text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;車&#x27;</span> <span class="keyword">in</span> text: <span class="comment"># 如果車出現，判斷附近是否出現撞</span></span><br><span class="line">        car_index = text.index(<span class="string">&#x27;車&#x27;</span>)</span><br><span class="line">        sub_text = text[<span class="built_in">max</span>(car_index - <span class="number">10</span>, <span class="number">0</span>): <span class="built_in">min</span>(car_index + <span class="number">10</span>, <span class="built_in">len</span>(text))]</span><br><span class="line">        <span class="built_in">print</span>(sub_text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;撞&#x27;</span> <span class="keyword">in</span> sub_text: <span class="comment"># 如果出現撞，則符合設定之規則</span></span><br><span class="line">            result.append(text)</span><br></pre></td></tr></table></figure><p>上面的做法有以下兩個問題，也是為什麼我們希望使用正則要表達對字串的篩選邏輯</p><ol><li>可讀性低</li><li>維護性低</li></ol><ul><li>使用正則的話</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&#x27;車禍|車.&#123;0,10&#125;撞|撞.&#123;0,10&#125;車&#x27;</span>):</span><br><span class="line">        result.append(text)</span><br></pre></td></tr></table></figure><hr><h2 id="什麼是正規表達式-Regular-Expression"><a href="#什麼是正規表達式-Regular-Expression" class="headerlink" title="什麼是正規表達式 Regular Expression"></a>什麼是正規表達式 Regular Expression</h2><blockquote><p>利用 <strong>文字</strong> 與一系列 <strong>定義好的符號</strong> 所組合而成的 <strong>規則模式（pattern）</strong>，用來匹配我們的 <strong>目標字串。<br>車禍|車.{0,5}撞|撞.{0,5}車</strong></p></blockquote><p>搭配支援正則表達的工具、套件，對字串做 <strong>搜尋</strong>、<strong>替換</strong> 等處理。</p><blockquote></blockquote><h2 id="該怎麼使用正則"><a href="#該怎麼使用正則" class="headerlink" title="該怎麼使用正則"></a>該怎麼使用正則</h2><img src="/2024/03/14/hello%20regexp/regexp_meme.png" class=""><h3 id="RegExp-常見特殊符號"><a href="#RegExp-常見特殊符號" class="headerlink" title="RegExp 常見特殊符號"></a><strong>RegExp 常見特殊符號</strong></h3><table><thead><tr><th>符號</th><th>解釋</th></tr></thead><tbody><tr><td><code>.</code></td><td>比對換行符<code>\n</code>以外所有字元</td></tr><tr><td><code>\w</code></td><td>英文字母與數字</td></tr><tr><td><code>\s</code></td><td>空白、換行符 <code>\n</code>、回車符 <code>\r</code>tab <code>\t</code></td></tr><tr><td><code>|</code></td><td>代表 or，用於連結兩種 pattern</td></tr></tbody></table><table><thead><tr><th>符號</th><th>解釋</th></tr></thead><tbody><tr><td><code>?</code></td><td>0 或一次</td></tr><tr><td><code>+</code></td><td>連續出現一次以上</td></tr><tr><td><code>&#123;x&#125;</code></td><td>x 次</td></tr><tr><td><code>&#123;x,y&#125;</code></td><td>x~y 次</td></tr></tbody></table><h3 id="小練習"><a href="#小練習" class="headerlink" title="小練習"></a><strong>小練習</strong></h3><p>下列哪個正規表達式 <strong>無法</strong> 比對到 <code>google</code>？</p><ol><li><code>g\s+gle</code></li><li><code>g\w&#123;1,&#125;gle</code></li><li><code>go+gle</code></li></ol><h3 id="Python-re-套件介紹"><a href="#Python-re-套件介紹" class="headerlink" title="Python re 套件介紹"></a><strong>Python re 套件介紹</strong></h3><blockquote><p><strong>設定 pattern → 判斷字串中是否有這個 pattern → 我的 pattern 對應到的字是什麼</strong></p></blockquote><p>在 python 中，我們可以透過 <code>re</code> 這個套件執行正則表達式的操作</p><ol><li><p>設定 pattern → <code>re.compile()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;小明從光復路由北往南方向直行，遭被告駕駛上開車輛左側碰撞而倒車，小明很生氣&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 re.compile 設定正規表達式</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>字串是否符合我們要的 pattern → <code>re.search()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;re.search(pattern=pattern, </span><br><span class="line">                    string=text)</span><br><span class="line"><span class="comment"># 在 index=22~28 match 到 ‘車輛左側碰撞’ 符合我們的規則</span></span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">22</span>, <span class="number">28</span>), <span class="keyword">match</span>=<span class="string">&#x27;車輛左側碰撞&#x27;</span>&gt; </span><br></pre></td></tr></table></figure></li><li><p>提取匹配到的字串 → <code>re.search().group()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;re.search(pattern, text).group()</span><br><span class="line"><span class="string">&#x27;車輛左側碰撞&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>結合 pd.Series 找出符合規則的資料 → <code>pd.Series.str.contains()</code></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;data = pd.DataFrame(&#123;<span class="string">&#x27;text&#x27;</span>: </span><br><span class="line">        [<span class="string">&#x27;小明從光復路由北往南方向直行，遭被告駕駛上開車輛左側碰撞而倒車，小明很生氣&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopgrstuvwxyz&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;甲乙丙丁戊&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;data.text.<span class="built_in">str</span>.contains(pat=pattern)</span><br><span class="line"><span class="number">0</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>想用 SQL 撈？→<code>RLIKE</code>  （適用HAP)</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> context</span><br><span class="line"><span class="keyword">FROM</span> the_table</span><br><span class="line"><span class="keyword">WHERE</span> context RLIKE <span class="string">&#x27;車禍|撞.&#123;0,10&#125;車|車.&#123;0,10&#125;撞&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="工具分享"><a href="#工具分享" class="headerlink" title="工具分享"></a>工具分享</h2><p><a href="https://regex101.com/">regex101: build, test, and debug regex</a></p><img src="/2024/03/14/hello%20regexp/regex101.png" class=""><hr><h2 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h2><p><a href="https://youtu.be/hy3sd9MOAcc?si=pq3WcCyCtBCAywth">CS50</a><br><a href="https://www.datacamp.com/tutorial/python-regular-expression-tutorial">DataCamp</a><br><a href="https://www.w3schools.com/python/python_regex.asp">W3School</a></p>]]></content>
      
      
      <categories>
          
          <category> nlp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
            <tag> regexp </tag>
            
            <tag> python </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
